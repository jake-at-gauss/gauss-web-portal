{
  // Place your desktop-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Add a function": {
    "scope": "javascript",
    "prefix": "fn",
    "body": [" () => {", "$0", "}"],
    "description": "Adds a javascript function"
  },
  "Create a div": {
    "scope": "javascript",
    "prefix": "div",
    "body": ["<div>$0</div>"],
    "description": "Adds a div"
  },
  "Create a Functional Component": {
    "scope": "javascript",
    "prefix": "fnc",
    "body": [
      "import React from 'react';",
      " ",
      "const ${TM_FILENAME/(.*)\\..+$/$1/} = ({}) => {",
      " ",
      "return (<div>$0</div>)",
      "}",
      " ",
      "export default ${TM_FILENAME/(.*)\\..+$/$1/};"
    ],
    "description": "Adds a javascript functional component"
  },
  "create a Class Component": {
    "scope": "javascript",
    "prefix": "clc",
    "body": [
      "import React, { Component } from 'react';",
      " ",
      "class ${TM_FILENAME/(.*)\\..+$/$1/} extends Component {",
      "constructor(props){",
      " super(props);",
      " ",
      " this.state= {}",
      "}",
      " ",
      "render(){",
      "return (<div>$0</div>)",
      "}",
      "}",
      " ",
      "export default ${TM_FILENAME/(.*)\\..+$/$1/};"
    ],
    "description": "Adds a javascript class component"
  },
  "destructure state": {
    "scope": "javascript",
    "prefix": "std",
    "body": ["const {$1} = this.state;", ""],
    "description": "creates state destructuring"
  },
  "destructure props": {
    "scope": "javascript",
    "prefix": "ppd",
    "body": ["const {$1} = this.props;"],
    "description": "creates prop destructuring"
  },
  "useState": {
    "prefix": "ust",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"],
    "description": "React useState() hook"
  }
}
